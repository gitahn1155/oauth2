import { execSync } from 'node:child_process';
import { promises } from 'node:fs';
import { c as consola } from '../shared/nuxi.5520c85f.mjs';
import { r as resolve } from '../shared/nuxi.28ceb2e0.mjs';
import { r as resolveModule } from '../shared/nuxi.2f82a09f.mjs';
import { g as getPackageManager, p as packageManagerLocks } from '../shared/nuxi.5010c284.mjs';
import { r as rmRecursive, t as touchFile, a as cleanupNuxtDirs } from '../shared/nuxi.238c4151.mjs';
import { d as defineNuxtCommand } from '../shared/nuxi.99740dab.mjs';
import '../shared/nuxi.ccadf1fb.mjs';
import 'util';
import 'path';
import 'fs';
import 'os';
import 'tty';
import 'node:module';
import 'node:url';

async function getNuxtVersion(paths) {
  try {
    const pkgJson = resolveModule("nuxt/package.json", paths);
    const pkg = pkgJson && JSON.parse(await promises.readFile(pkgJson, "utf8"));
    if (!pkg.version) {
      consola.warn("Cannot find any installed nuxt versions in ", paths);
    }
    return pkg.version || null;
  } catch {
    return null;
  }
}
const upgrade = defineNuxtCommand({
  meta: {
    name: "upgrade",
    usage: "npx nuxi upgrade [--force|-f]",
    description: "Upgrade nuxt"
  },
  async invoke(args) {
    const rootDir = resolve(args._[0] || ".");
    const packageManager = getPackageManager(rootDir);
    if (!packageManager) {
      console.error("Cannot detect Package Manager in", rootDir);
      process.exit(1);
    }
    const packageManagerVersion = execSync(`${packageManager} --version`).toString("utf8").trim();
    consola.info("Package Manager:", packageManager, packageManagerVersion);
    const currentVersion = await getNuxtVersion(rootDir) || "[unknown]";
    consola.info("Current nuxt version:", currentVersion);
    if (args.force || args.f) {
      consola.info("Removing lock-file and node_modules...");
      const pmLockFile = resolve(rootDir, packageManagerLocks[packageManager]);
      await rmRecursive([pmLockFile, resolve(rootDir, "node_modules")]);
      await touchFile(pmLockFile);
    }
    consola.info("Installing latest Nuxt 3 RC...");
    execSync(`${packageManager} ${packageManager === "yarn" ? "add" : "install"} -D nuxt@rc`, { stdio: "inherit" });
    await cleanupNuxtDirs(rootDir);
    const upgradedVersion = await getNuxtVersion(rootDir) || "[unknown]";
    consola.info("Upgraded nuxt version:", upgradedVersion);
    if (upgradedVersion === currentVersion) {
      consola.success("You're already using the latest version of nuxt.");
    } else {
      consola.success("Successfully upgraded nuxt from", currentVersion, "to", upgradedVersion);
      const commitA = currentVersion.split(".").pop();
      const commitB = upgradedVersion.split(".").pop();
      if (commitA && commitB) {
        consola.info("Changelog:", `https://github.com/nuxt/framework/compare/${commitA}...${commitB}`);
      }
    }
  }
});

export { upgrade as default };
