import { pathToFileURL } from 'node:url';
import { createApp, defineEventHandler, defineLazyEventHandler, createError } from 'h3';
import { ViteNodeServer } from 'vite-node/server';
import fse from 'fs-extra';
import { resolve as resolve$1 } from 'pathe';
import { addServerMiddleware } from '@nuxt/kit';
import { normalizeViteManifest } from 'vue-bundle-renderer';
import { resolve } from 'mlly';
import { d as distDir, i as isCSS } from '../shared/vite-builder.18523526.mjs';
import { c as createIsExternal } from '../shared/vite-builder.e04fffa8.mjs';
import 'vite';
import '@rollup/plugin-replace';
import '@vitejs/plugin-vue';
import '@vitejs/plugin-vue-jsx';
import 'get-port-please';
import 'ufo';
import 'escape-string-regexp';
import 'defu';
import 'node:fs';
import 'ohash';
import 'pkg-types';
import 'unplugin';
import 'estree-walker';
import 'magic-string';
import 'externality';

function viteNodePlugin(ctx) {
  const invalidates = /* @__PURE__ */ new Set();
  return {
    name: "nuxt:vite-node-server",
    enforce: "post",
    configureServer(server) {
      server.middlewares.use("/__nuxt_vite_node__", createViteNodeMiddleware(ctx, invalidates));
    },
    handleHotUpdate({ file, server }) {
      function markInvalidate(mod) {
        if (invalidates.has(mod.id)) {
          return;
        }
        invalidates.add(mod.id);
        for (const importer of mod.importers) {
          markInvalidate(importer);
        }
      }
      const mods = server.moduleGraph.getModulesByFile(file) || [];
      for (const mod of mods) {
        markInvalidate(mod);
      }
    }
  };
}
function registerViteNodeMiddleware(ctx) {
  addServerMiddleware({
    route: "/__nuxt_vite_node__/",
    handler: createViteNodeMiddleware(ctx)
  });
}
function getManifest(ctx) {
  const css = Array.from(ctx.ssrServer.moduleGraph.urlToModuleMap.keys()).filter((i) => isCSS(i));
  const manifest = normalizeViteManifest({
    "@vite/client": {
      file: "@vite/client",
      css,
      module: true,
      isEntry: true
    },
    [ctx.entry]: {
      file: ctx.entry,
      isEntry: true,
      module: true,
      resourceType: "script"
    }
  });
  return manifest;
}
function createViteNodeMiddleware(ctx, invalidates = /* @__PURE__ */ new Set()) {
  const app = createApp();
  app.use("/manifest", defineEventHandler(() => {
    const manifest = getManifest(ctx);
    return manifest;
  }));
  app.use("/invalidates", defineEventHandler(() => {
    if (invalidates.size) {
      for (const key of ctx.ssrServer.moduleGraph.fileToModulesMap.keys()) {
        if (key.startsWith(ctx.nuxt.options.appDir + "/entry")) {
          invalidates.add(key);
        }
      }
    }
    const ids = Array.from(invalidates);
    invalidates.clear();
    return ids;
  }));
  app.use("/module", defineLazyEventHandler(() => {
    const viteServer = ctx.ssrServer;
    const node = new ViteNodeServer(viteServer, {
      deps: {
        inline: [
          /\/(nuxt|nuxt3)\//,
          /^#/,
          ...ctx.nuxt.options.build.transpile
        ]
      },
      transformMode: {
        ssr: [/.*/],
        web: []
      }
    });
    const isExternal = createIsExternal(viteServer, ctx.nuxt.options.rootDir);
    node.shouldExternalize = async (id) => {
      const result = await isExternal(id);
      if (result?.external) {
        return resolve(result.id, { url: ctx.nuxt.options.rootDir });
      }
      return false;
    };
    return async (event) => {
      const moduleId = decodeURI(event.req.url).substring(1);
      if (moduleId === "/") {
        throw createError({ statusCode: 400 });
      }
      const module = await node.fetchModule(moduleId);
      return module;
    };
  }));
  return app.nodeHandler;
}
async function initViteNodeServer(ctx) {
  let entryPath = resolve$1(ctx.nuxt.options.appDir, "entry.async.mjs");
  if (!fse.existsSync(entryPath)) {
    entryPath = resolve$1(ctx.nuxt.options.appDir, "entry.async");
  }
  const host = ctx.nuxt.options.server.host || "localhost";
  const port = ctx.nuxt.options.server.port || "3000";
  const protocol = ctx.nuxt.options.server.https ? "https" : "http";
  const viteNodeServerOptions = {
    baseURL: `${protocol}://${host}:${port}/__nuxt_vite_node__`,
    root: ctx.nuxt.options.srcDir,
    entryPath,
    base: ctx.ssrServer.config.base || "/_nuxt/"
  };
  process.env.NUXT_VITE_NODE_OPTIONS = JSON.stringify(viteNodeServerOptions);
  const serverResolvedPath = resolve$1(distDir, "runtime/vite-node.mjs");
  const manifestResolvedPath = resolve$1(distDir, "runtime/client.manifest.mjs");
  await fse.writeFile(
    resolve$1(ctx.nuxt.options.buildDir, "dist/server/server.mjs"),
    `export { default } from ${JSON.stringify(pathToFileURL(serverResolvedPath).href)}`
  );
  await fse.writeFile(
    resolve$1(ctx.nuxt.options.buildDir, "dist/server/client.manifest.mjs"),
    `export { default } from ${JSON.stringify(pathToFileURL(manifestResolvedPath).href)}`
  );
}

export { initViteNodeServer, registerViteNodeMiddleware, viteNodePlugin };
